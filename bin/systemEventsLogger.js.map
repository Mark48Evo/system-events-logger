{"version":3,"file":"systemEventsLogger.js","sources":["../src/elasticSearchMapping.js","../src/index.js"],"sourcesContent":["export const indexTemplate = {\n  index_patterns: ['system_events_*'],\n  mappings: {\n    systemEvent: {\n      properties: {\n        eventName: {\n          type: 'keyword',\n        },\n        data: {\n          type: 'object',\n          dynamic: false,\n          properties: {},\n        },\n        metadata: {\n          type: 'object',\n          properties: {\n            processId: {\n              type: 'number',\n            },\n            processName: {\n              type: 'keyword',\n            },\n          },\n        },\n        createdAt: {\n          type: 'date',\n          formatter: 'epoch_second',\n        },\n      },\n    },\n  },\n  aliases: {\n    system_events: {},\n  },\n};\n\nexport const indexPipeline = {\n  description: 'Appends date to index name on systemEvent index',\n  processors: [\n    {\n      date_index_name: {\n        field: 'createdAt',\n        index_name_prefix: 'system_events_',\n        date_rounding: 'D',\n        date_formats: 'UNIX',\n      },\n    },\n  ],\n};\n","import { Client as ElasticSearch } from 'elasticsearch';\nimport { indexTemplate, indexPipeline } from './elasticSearchMapping';\n\nconst config = {\n  elasticSearch: {\n    host: process.env.ELASTICSEARCH_HOST || '127.0.0.1:9200',\n  },\n  rabbitmq: {\n    host: process.env.RABBITMQ_HOST || 'amqp://localhost',\n  },\n};\n\nconst es = new ElasticSearch({\n  host: config.elasticSearch.host,\n});\n\nasync function pingES() {\n  try {\n    await es.ping({\n      requestTimeout: 30000,\n    });\n  } catch (e) {\n    console.error(`ElasticSearch \"${config.elasticSearch.host}\" is down. Error: \"${e.message}\"`);\n\n    process.exit(1);\n  }\n}\n\nfunction esErrorHandling(e) {\n  console.error(`ElasticSearch error: \"${e.message}\"`);\n\n  process.exit(1);\n}\n\nexport async function main() {\n  await pingES();\n}\n\nexport async function setup(force = false) {\n  await pingES();\n\n  try {\n    await es.indices.putTemplate({\n      name: 'system_events_template',\n      body: indexTemplate,\n      create: force,\n    });\n  } catch (e) {\n    esErrorHandling(e);\n  }\n\n  try {\n    await es.ingest.putPipeline({\n      id: 'system_events_pipeline',\n      body: indexPipeline,\n    });\n  } catch (e) {\n    esErrorHandling(e);\n  }\n}\n\nexport async function cleanup() {\n  await pingES();\n}\n"],"names":["indexTemplate","indexPipeline","config","process","env","ELASTICSEARCH_HOST","RABBITMQ_HOST","es","ElasticSearch","elasticSearch","host","pingES","ping","error","message","exit","esErrorHandling","e","main","setup","indices","putTemplate","force","ingest","putPipeline","cleanup"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAMA,gBAAgB;kBACX,CAAC,iBAAD,CADW;YAEjB;iBACK;kBACC;mBACC;gBACH;SAFE;cAIJ;gBACE,QADF;mBAEK,KAFL;sBAGQ;SAPJ;kBASA;gBACF,QADE;sBAEI;uBACC;oBACH;aAFE;yBAIG;oBACL;;;SAhBF;mBAoBC;gBACH,MADG;qBAEE;;;;GA1BQ;WA+BlB;mBACQ;;CAhCZ;AAoCP,AAAO,IAAMC,gBAAgB;eACd,iDADc;cAEf,CACV;qBACmB;aACR,WADQ;yBAEI,gBAFJ;qBAGA,GAHA;oBAID;;GANR;CAFP;;ACjCP,IAAMC,SAAS;iBACE;UACPC,QAAQC,GAAR,CAAYC,kBAAZ,IAAkC;GAF7B;YAIH;UACFF,QAAQC,GAAR,CAAYE,aAAZ,IAA6B;;CALvC;AASA,IAAMC,KAAK,IAAIC,oBAAJ,CAAkB;QACrBN,OAAOO,aAAP,CAAqBC;CADlB,CAAX;;SAIeC;;;;;;;0BAAf;;;;;;;mBAEUJ,GAAGK,IAAH,CAAQ;8BACI;aADZ,CAFV;;;;;;;;;oBAMYC,KAAR,2BAAgCX,OAAOO,aAAP,CAAqBC,IAArD,kCAA+E,YAAEI,OAAjF;oBAEQC,IAAR,CAAa,CAAb;;;;;;;;;;;;AAIJ,SAASC,eAAT,CAAyBC,CAAzB,EAA4B;UAClBJ,KAAR,kCAAuCI,EAAEH,OAAzC;UAEQC,IAAR,CAAa,CAAb;;;AAGF,SAAsBG,IAAtB;;;;;;;0BAAO;;;;;;mBACCP,QADD;;;;;;;;;;;;AAIP,SAAsBQ,KAAtB;;;;;;;0BAAO;;;;;;;iBAAA,8DAA6B,KAA7B;;mBACCR,QADD;;;;;mBAIGJ,GAAGa,OAAH,CAAWC,WAAX,CAAuB;oBACrB,wBADqB;oBAErBrB,aAFqB;sBAGnBsB;aAHJ,CAJH;;;;;;;;;;;;;;mBAcGf,GAAGgB,MAAH,CAAUC,WAAV,CAAsB;kBACtB,wBADsB;oBAEpBvB;aAFF,CAdH;;;;;;;;;;;;;;;;;;;;;AAuBP,SAAsBwB,OAAtB;;;;;;;0BAAO;;;;;;mBACCd,QADD;;;;;;;;;;;;;;;;"}